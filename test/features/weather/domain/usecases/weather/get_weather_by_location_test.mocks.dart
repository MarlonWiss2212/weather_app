// Mocks generated by Mockito 5.4.4 from annotations
// in weather_app/test/features/weather/domain/usecases/weather/get_weather_by_location_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/core/params/get_weather_with_location_params.dart'
    as _i10;
import 'package:weather_app/core/resources/data_state.dart' as _i4;
import 'package:weather_app/features/weather/data/data_sources/remote/geocoding_service.dart'
    as _i3;
import 'package:weather_app/features/weather/data/data_sources/remote/weather_service.dart'
    as _i2;
import 'package:weather_app/features/weather/data/models/geocoding_models/reverse_geocoding_model.dart'
    as _i9;
import 'package:weather_app/features/weather/data/models/weather_forecast_models/weather_forecast_model.dart'
    as _i8;
import 'package:weather_app/features/weather/data/repository/weather_repository_impl.dart'
    as _i6;
import 'package:weather_app/features/weather/domain/entities/location_entity.dart'
    as _i12;
import 'package:weather_app/features/weather/domain/repository/location_repository.dart'
    as _i5;
import 'package:weather_app/features/weather/domain/usecases/location/get_location.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeatherService_0 extends _i1.SmartFake
    implements _i2.WeatherService {
  _FakeWeatherService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGeocodingService_1 extends _i1.SmartFake
    implements _i3.GeocodingService {
  _FakeGeocodingService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataState_2<T> extends _i1.SmartFake implements _i4.DataState<T> {
  _FakeDataState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocationRepository_3 extends _i1.SmartFake
    implements _i5.LocationRepository {
  _FakeLocationRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepositoryImpl extends _i1.Mock
    implements _i6.WeatherRepositoryImpl {
  MockWeatherRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WeatherService get weatherService => (super.noSuchMethod(
        Invocation.getter(#weatherService),
        returnValue: _FakeWeatherService_0(
          this,
          Invocation.getter(#weatherService),
        ),
      ) as _i2.WeatherService);

  @override
  _i3.GeocodingService get geocodingService => (super.noSuchMethod(
        Invocation.getter(#geocodingService),
        returnValue: _FakeGeocodingService_1(
          this,
          Invocation.getter(#geocodingService),
        ),
      ) as _i3.GeocodingService);

  @override
  _i7.Future<
          _i4.DataState<(_i8.WeatherForecastModel, _i9.ReverseGeocodingModel?)>>
      getWeatherData({required _i10.GetWeatherWithLocationParams? params}) =>
          (super.noSuchMethod(
            Invocation.method(
              #getWeatherData,
              [],
              {#params: params},
            ),
            returnValue: _i7.Future<
                _i4.DataState<
                    (
                      _i8.WeatherForecastModel,
                      _i9.ReverseGeocodingModel?
                    )>>.value(_FakeDataState_2<
                (_i8.WeatherForecastModel, _i9.ReverseGeocodingModel?)>(
              this,
              Invocation.method(
                #getWeatherData,
                [],
                {#params: params},
              ),
            )),
          ) as _i7.Future<
              _i4.DataState<
                  (_i8.WeatherForecastModel, _i9.ReverseGeocodingModel?)>>);
}

/// A class which mocks [GetLocationUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetLocationUseCase extends _i1.Mock
    implements _i11.GetLocationUseCase {
  MockGetLocationUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.LocationRepository get locationRepository => (super.noSuchMethod(
        Invocation.getter(#locationRepository),
        returnValue: _FakeLocationRepository_3(
          this,
          Invocation.getter(#locationRepository),
        ),
      ) as _i5.LocationRepository);

  @override
  _i7.Future<_i4.DataState<_i12.LocationEntity>> call({dynamic params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i7.Future<_i4.DataState<_i12.LocationEntity>>.value(
            _FakeDataState_2<_i12.LocationEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i7.Future<_i4.DataState<_i12.LocationEntity>>);
}
