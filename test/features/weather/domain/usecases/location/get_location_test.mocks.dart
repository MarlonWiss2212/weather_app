// Mocks generated by Mockito 5.4.4 from annotations
// in weather_app/test/features/weather/domain/usecases/location/get_location_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:geolocator/geolocator.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/core/resources/data_state.dart' as _i3;
import 'package:weather_app/features/weather/data/data_sources/local/location_service.dart'
    as _i2;
import 'package:weather_app/features/weather/data/models/location_model.dart'
    as _i6;
import 'package:weather_app/features/weather/data/repository/location_repository_impl.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationService_0 extends _i1.SmartFake
    implements _i2.LocationService {
  _FakeLocationService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataState_1<T> extends _i1.SmartFake implements _i3.DataState<T> {
  _FakeDataState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocationRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationRepositoryImpl extends _i1.Mock
    implements _i4.LocationRepositoryImpl {
  MockLocationRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LocationService get locationService => (super.noSuchMethod(
        Invocation.getter(#locationService),
        returnValue: _FakeLocationService_0(
          this,
          Invocation.getter(#locationService),
        ),
      ) as _i2.LocationService);

  @override
  _i5.Future<_i3.DataState<_i6.LocationModel>> getLocation() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocation,
          [],
        ),
        returnValue: _i5.Future<_i3.DataState<_i6.LocationModel>>.value(
            _FakeDataState_1<_i6.LocationModel>(
          this,
          Invocation.method(
            #getLocation,
            [],
          ),
        )),
      ) as _i5.Future<_i3.DataState<_i6.LocationModel>>);

  @override
  _i5.Future<_i3.DataState<_i7.LocationPermission>> checkPermission() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkPermission,
          [],
        ),
        returnValue: _i5.Future<_i3.DataState<_i7.LocationPermission>>.value(
            _FakeDataState_1<_i7.LocationPermission>(
          this,
          Invocation.method(
            #checkPermission,
            [],
          ),
        )),
      ) as _i5.Future<_i3.DataState<_i7.LocationPermission>>);

  @override
  _i5.Future<_i3.DataState<_i3.Unit>> isLocationServiceEnabled() =>
      (super.noSuchMethod(
        Invocation.method(
          #isLocationServiceEnabled,
          [],
        ),
        returnValue: _i5.Future<_i3.DataState<_i3.Unit>>.value(
            _FakeDataState_1<_i3.Unit>(
          this,
          Invocation.method(
            #isLocationServiceEnabled,
            [],
          ),
        )),
      ) as _i5.Future<_i3.DataState<_i3.Unit>>);

  @override
  _i5.Future<_i3.DataState<_i7.LocationPermission>> requestPermission() =>
      (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i5.Future<_i3.DataState<_i7.LocationPermission>>.value(
            _FakeDataState_1<_i7.LocationPermission>(
          this,
          Invocation.method(
            #requestPermission,
            [],
          ),
        )),
      ) as _i5.Future<_i3.DataState<_i7.LocationPermission>>);
}
